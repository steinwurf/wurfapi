{
  "set(constheat&h,intmax)const": {
    "access": "public",
    "briefdescription": [
      {
        "content": "Set the heat.",
        "kind": "text"
      }
    ],
    "detaileddescription": [
      {
        "content": "This function is use to set the head of the machine.",
        "kind": "text"
      },
      {
        "content": "void yes();\n",
        "is_block": true,
        "kind": "code"
      },
      {
        "content": "But maybe it also does other things?",
        "kind": "text"
      },
      {
        "content": "Test this break",
        "kind": "text"
      },
      {
        "content": "And then some text",
        "kind": "text"
      }
    ],
    "is_const": true,
    "is_constructor": false,
    "is_destructor": false,
    "is_explicit": false,
    "is_inline": false,
    "is_static": false,
    "is_virtual": false,
    "kind": "function",
    "location": {
      "line-end": null,
      "line-start": 23,
      "path": "function.hpp"
    },
    "name": "set",
    "parameters": [
      {
        "description": [
          {
            "content": "Set the heat object.",
            "kind": "text"
          }
        ],
        "name": "h",
        "tokens": [
          {
            "value": "const heat &"
          },
          {
            "value": " h"
          }
        ]
      },
      {
        "description": [
          {
            "content": "The maximum heat value.",
            "kind": "text"
          }
        ],
        "name": "max",
        "tokens": [
          {
            "value": "int"
          },
          {
            "value": " max"
          }
        ]
      }
    ],
    "return": {
      "description": [
        {
          "content": "The current heat.",
          "kind": "text"
        },
        {
          "content": "for (uint64_t i = 0; i < 3; ++i)\n{\n    std::cout << i << \"\\n\";\n}\n",
          "is_block": true,
          "kind": "code"
        }
      ],
      "type": [
        {
          "value": "uint32_t"
        }
      ]
    },
    "scope": null
  },
  "set_array(constuint8_tarray[100])const": {
    "access": "public",
    "briefdescription": [],
    "detaileddescription": [
      {
        "content": "Test array parameters",
        "kind": "text"
      }
    ],
    "is_const": true,
    "is_constructor": false,
    "is_destructor": false,
    "is_explicit": false,
    "is_inline": false,
    "is_static": false,
    "is_virtual": false,
    "kind": "function",
    "location": {
      "line-end": null,
      "line-start": 27,
      "path": "function.hpp"
    },
    "name": "set_array",
    "parameters": [
      {
        "description": [
          {
            "content": "The name of the heat source as a const array",
            "kind": "text"
          }
        ],
        "name": "array",
        "tokens": [
          {
            "value": "const uint8_t"
          },
          {
            "value": " array"
          },
          {
            "value": "[100]"
          }
        ]
      }
    ],
    "return": {
      "description": [],
      "type": [
        {
          "value": "void"
        }
      ]
    },
    "scope": null
  },
  "set_bool(booltest=false)": {
    "access": "public",
    "briefdescription": [],
    "detaileddescription": [
      {
        "content": "Test default parameters",
        "kind": "text"
      }
    ],
    "is_const": false,
    "is_constructor": false,
    "is_destructor": false,
    "is_explicit": false,
    "is_inline": false,
    "is_static": false,
    "is_virtual": false,
    "kind": "function",
    "location": {
      "line-end": null,
      "line-start": 31,
      "path": "function.hpp"
    },
    "name": "set_bool",
    "parameters": [
      {
        "description": [
          {
            "content": "Testing bools",
            "kind": "text"
          }
        ],
        "name": "test",
        "tokens": [
          {
            "value": "bool"
          },
          {
            "value": " test"
          },
          {
            "value": " = "
          },
          {
            "value": "false"
          }
        ]
      }
    ],
    "return": {
      "description": [],
      "type": [
        {
          "value": "void"
        }
      ]
    },
    "scope": null
  },
  "set_stuff(int(*(*x)(double))[3]=nullptr)": {
    "access": "public",
    "briefdescription": [],
    "detaileddescription": [
      {
        "content": "Test convoluted stuff - Doxygen does not parse such things. So we cannot document the parameter x. It seems the recommended way is to create a typedef for the function pointer (which is also easier to read).",
        "kind": "text"
      }
    ],
    "is_const": false,
    "is_constructor": false,
    "is_destructor": false,
    "is_explicit": false,
    "is_inline": false,
    "is_static": false,
    "is_virtual": false,
    "kind": "function",
    "location": {
      "line-end": null,
      "line-start": 36,
      "path": "function.hpp"
    },
    "name": "set_stuff",
    "parameters": [
      {
        "tokens": [
          {
            "value": "int(*(*x)(double))"
          },
          {
            "value": "[3]"
          },
          {
            "value": " = "
          },
          {
            "value": "nullptr"
          }
        ]
      }
    ],
    "return": {
      "description": [],
      "type": [
        {
          "value": "void"
        }
      ]
    },
    "scope": null
  }
}